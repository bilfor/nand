<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList/>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <keyword> var </keyword>
      <identifier> SquareGame </identifier>
      <identifier> game </identifier>
      <symbol> ; </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> game </identifier>
          <symbol> = </symbol>
          <identifier> game </identifier>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> run </identifier>
          <symbol> ( </symbol>
          <parameterList/>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <parameterList/>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> more </identifier>
    <symbol> ( </symbol>
    <parameterList/>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <keyword> var </keyword>
      <keyword> boolean </keyword>
      <identifier> b </identifier>
      <symbol> ; </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <parameterList>
            <identifier> b </identifier>
          </parameterList>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
    </subroutineBody>
  </subroutineDec>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <symbol> } </symbol>
  <statements>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
  </statements>
  <symbol> } </symbol>
  <symbol> } </symbol>
</class>