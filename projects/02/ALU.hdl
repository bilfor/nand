// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //Not x
    Not16(in=x, out=notx); 
    
    //Zero x
    And16(a=x, b=notx, out=zerox);

    //Notzero x
    Not16(in=zerox, out=notzerox);
     
    //Not y
    Not16(in=y, out=noty); 
    
    //Zero y
    And16(a=y, b=noty, out=zeroy);

    //Notzero y
    Not16(in=zeroy, out=notzeroy);

    Mux4Way16(a=x, b=zerox, c=notx, d=notzerox, sel[1]=nx, sel[0]=zx, out=xprime);
    Mux4Way16(a=y, b=zeroy, c=noty, d=notzeroy, sel[1]=ny, sel[0]=zy, out=yprime);

    Add16(a=xprime, b=yprime, out=addxy);
    And16(a=xprime, b=yprime, out=andxy);

    Not16(in=addxy, out=notaddxy);
    Not16(in=andxy, out=notandxy);

    Mux4Way16(a=andxy, b=addxy, c=notandxy, d=notaddxy, sel[1]=no, sel[0]=f, out[0..7]=w98, out[8..15]=w99, out=out, out[15]=negativer);

    Or8Way(in=w98, out=w1);
    Or8Way(in=w99, out=w2);
    Or(a=w1, b=w2, out=w3);
    Not(in=w3, out=zr);

    //w4 is true if msb is neg
    And(a=negativer, b=true, out=ng);
}
