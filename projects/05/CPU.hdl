// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

    And(a=instruction[3], b=instruction[15], out=writeM);

    // a-reg input mux -- pass a instr or c instr?
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=amuxout);

    // a-reg control logic
    Not(in=instruction[15], out=ainstr); 
    And(a=instruction[5], b=instruction[15], out=aeqinstr);   //d1 is 1 (A=) AND c-instr
    Or(a=aeqinstr, b=ainstr, out=loada);
    ARegister(in=amuxout, load=loada, out=aregout, out[0..14]=addressM);

    //d-reg
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=dregout);

    // alu mux input
    Mux16(a=aregout, b=inM, sel=instruction[12], out=alumuxout);

    //PC control logic
    And(a=zr, b=instruction[1], out=zerojump);   //if output is zero and that meets the instruction's condition, LOAD

    And(a=ng, b=instruction[2], out=negjump);

    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=pos);
    And(a=pos, b=instruction[0], out=posjump); 

    Or8Way(in[0]=zerojump, in[1]=negjump, in[2]=posjump, out=loadjump);
    And(a=loadjump, b=instruction[15], out=trueload);
    // Or(a=loadjump, b=reset, out=dontincrement);
    // Not(in=dontincrement, out=increment);
    Not(in=reset, out=increment);

    PC(in=aregout, inc=increment, load=trueload, reset=reset, out[0..14]=pc);

    ALU(x=dregout, y=alumuxout, zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=aluout, zr=zr, ng=ng, out=outM);
}
